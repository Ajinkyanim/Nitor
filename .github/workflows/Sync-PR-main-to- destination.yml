name: Sync PR main to destination

on:
  pull_request:
    types:
      - closed   # fires when a PR is closed (includes merged)
    branches:
      - main      # runs when a PR is merged to main
  workflow_dispatch:

jobs:
  sync-to-destination:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.base.ref, 'main')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetch full history

      - name: Get feature branch name
        id: branch_name
        run: | 
             echo $GITHUB_REF
             echo "Sanitized branch is ${GITHUB_REF#refs/heads/}"
             echo "sanitized_branch_name=$GITHUB_REF" >> $GITHUB_OUTPUT
             
      - name: Debug branch name
        run:  echo "Sanitized branch is ${{ steps.branch_name.outputs.sanitized_branch_name }}"
     
      - name: Create PR into destination
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN_CLASSIC }}
        run: |
          OUTPUT=$(gh pr create \
            --title "Sync ${{ steps.branch_name.outputs.branch }} into destintaion" \
            --body "Automatically created PR to sync ${{ steps.branch_name.outputs.branch }} into destination after merging into main" \
            --base destination \
            --head ${{ steps.branch_name.outputs.sanitized_branch_name }})
            echo "RAW PR output:"
            echo "$OUTPUT"
            
            PR_NUMBER=$(echo "$OUTPUT" | grep -oE '[0-9]+$')
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

            echo "‚úÖ PR #$PR_NUMBER created"
      
      - name: Get PR SHA
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN_CLASSIC }}
        run: |
          PR_SHA=$(gh pr view $pr_number --json headRefOid -q '.headRefOid')
          echo "‚úÖ PR_SHA #$PR_SHA "
          echo "PR_SHA=$PR_SHA" >> $GITHUB_ENV
      
          
      - name: Debug ‚Äì list all status contexts
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN_CLASSIC }}
        run: |
          sleep 120
          gh api repos/Ajinkyanim/Nitor/commits/$PR_SHA/status
          
      - name: Wait for required checks to complete
        env:
            GITHUB_TOKEN: ${{ secrets.MY_TOKEN_CLASSIC }}
        run: |
          echo "PR_NUMBER=$PR_NUMBER"
          echo "PR_SHA=$PR_SHA"

          echo "‚è≥ Waiting for status checks on commit: $PR_SHA"

          for i in {1..40}; do   # 40 * 30s = 20 mins
            # Grab all statuses for this commit
            JSON=$(gh api repos/${{ github.repository }}/commits/$PR_SHA/status)

            # Extract states
            STATES=$(echo "$JSON" | jq -r '.statuses[].state')
            CONTEXTS=$(echo "$JSON" | jq -r '.statuses[].context')

            echo "üîç Status checks:"
            paste <(echo "$CONTEXTS") <(echo "$STATES")

            # If any check is "pending" or "null", wait more
            if echo "$STATES" | grep -qE 'pending|null'; then
              echo "‚è≥ Checks still running... retrying"
              sleep 30
              continue
            fi

            # If all are "success", we‚Äôre good
            if ! echo "$STATES" | grep -qv success; then
              echo "‚úÖ All status checks passed"
              exit 0
            fi

            # If we reach here ‚Üí at least one failed
            echo "‚ùå Some status checks failed"
            exit 1
          done

          echo "‚è∞ Timeout ‚Äì checks didn‚Äôt finish in 20 min"
          exit 1
      - name: Debug branch name
        run:  echo "Sanitized branch is ${{ steps.branch_name.outputs.sanitized_branch_name }}"

      - name: Debug branch name
        run:  echo "Sanitized branch is ${{ steps.branch_name.outputs.sanitized_branch_name }}"
        
      - name: Auto-approve PR
        env:
          GITHUB_TOKEN: ${{ secrets.My_Token }}
        run: |
          PR_NUMBER=$(gh pr list \
            --head main \
            --base destination \
            --state open \
            --json number -q '.[0].number')
          echo "PR_NUMBER=$PR_NUMBER"
          if [ -n "$PR_NUMBER" ]; then
            gh pr review --approve --body "Auto-approved sync PR" "$PR_NUMBER"
          fi

      - name: Auto-merge PR
        env:
          GITHUB_TOKEN: ${{ secrets.VIVEK_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list \
            --head main \
            --base destination \
            --state open \
            --json number -q '.[0].number')

          if [ -n "$PR_NUMBER" ]; then
            gh pr merge --squash --admin "$PR_NUMBER"
          fi
